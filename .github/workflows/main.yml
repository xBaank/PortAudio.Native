name: Publish to NuGet

on:
  push:
    branches:
      - dev
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'  # Runs daily at midnight UTC

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      exists: ${{ steps.check-nuget.outputs.exists }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Get latest GitHub release version
        id: get-version
        run: |
          LATEST_RELEASE=$(curl -s https://api.github.com/repos/xBaank/PortAudioBin/releases/latest | jq -r '.tag_name')
          echo "Latest release version: $LATEST_RELEASE"
          echo "::set-output name=version::$LATEST_RELEASE"

      - name: Check if version already exists on NuGet
        id: check-nuget
        run: |
          PACKAGE_VERSION=${{ steps.get-version.outputs.version }}
          EXISTS=$(dotnet nuget search "YourPackageName" --source https://api.nuget.org/v3/index.json --take 1 | grep -q "$PACKAGE_VERSION" && echo "true" || echo "false")
          echo "::set-output name=exists::$EXISTS"

  download-native-libraries:
    needs: check-version
    strategy:
      matrix:
        rid: 
            - osx-x64
            - osx-arm64
            - linux-x64
            - linux-arm64
            - win-x86
            - win-x64
            - win-arm64
    runs-on: ubuntu-latest
    if: needs.check-version.outputs.exists == 'false'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.x'
    
      - name: Determine Download RID
        id: determine-rid
        run: |
          if [[ ${{ matrix.rid }} == win-x86 ]]; then
            DOWNLOAD_RID="windows-x86"
          elif [[ ${{ matrix.rid }} == win-x64 ]]; then
            DOWNLOAD_RID="windows-x64"
          elif [[ ${{ matrix.rid }} == win-arm64 ]]; then
            DOWNLOAD_RID="windows-arm64"
          elif [[ ${{ matrix.rid }} == osx-x64 ]]; then
            DOWNLOAD_RID="osx-uni"
          elif [[ ${{ matrix.rid }} == osx-arm64 ]]; then
            DOWNLOAD_RID="osx-uni"
          else
            DOWNLOAD_RID="${{ matrix.rid }}"
          fi
          echo "DOWNLOAD_RID=$DOWNLOAD_RID" >> $GITHUB_ENV
    
      - name: Download and extract native library
        run: |
            mkdir -p runtimes/${{ matrix.rid}}/native
            curl -L -o runtimes/${{ matrix.rid}}/native/library.zip "https://github.com/xBaank/PortAudioBin/releases/download/${{ needs.check-version.outputs.version }}/portaudio-${{ env.DOWNLOAD_RID }}.zip"
            unzip -o runtimes/${{ matrix.rid}}/native/library.zip -d runtimes/${{ matrix.rid}}/native/
            rm runtimes/${{ matrix.rid}}/native/library.zip
            
            if [[ ${{ startsWith(matrix.rid, 'win-') }} ]]; then
              mv runtimes/${{ matrix.rid}}/native/bin/portaudio.dll runtimes/${{ matrix.rid}}/native/
              rm -rf runtimes/${{ matrix.rid}}/native/bin
            elif [[ ${{ startsWith(matrix.rid, 'linux-') }}  ]]; then
              mv runtimes/${{ matrix.rid}}/native/lib/libportaudio.so runtimes/${{ matrix.rid}}/native/
              rm -rf runtimes/${{ matrix.rid}}/native/lib
            elif [[  ${{ startsWith(matrix.rid, 'osx-') }}  ]]; then
              mv runtimes/${{ matrix.rid}}/native/lib/libportaudio.dylib runtimes/${{ matrix.rid}}/native/
              rm -rf runtimes/${{ matrix.rid}}/native/lib
            fi
  
            rm runtimes/${{ matrix.rid}}/native/library.zip
  
      - name: Upload native libraries as artifact
        uses: actions/upload-artifact@v3
        with:
          name: native-libs
          path: runtimes/

  build-and-publish:
    runs-on: ubuntu-latest
    needs: [check-version, download-native-libraries]
    if: needs.check-version.outputs.exists == 'false'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download native libraries artifact
        uses: actions/download-artifact@v3
        with:
          name: native-libs

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.x' 

      - name: Restore dependencies
        run: dotnet restore

      - name: Build project
        run: dotnet build --configuration Release

      - name: Update package version
        run: |
          dotnet-gitversion /updateassemblyinfo
          dotnet pack --configuration Release -o ./nupkg /p:PackageVersion=${{ needs.check-version.outputs.version }}

      - name: Upload NuGet package as artifact
        uses: actions/upload-artifact@v3
        with:
            name: nuget-package
            path: ./nupkg/*.nupkg
            
      - name: Publish to NuGet
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        run: dotnet nuget push ./nupkg/*.nupkg --source https://api.nuget.org/v3/index.json --api-key $NUGET_API_KEY
